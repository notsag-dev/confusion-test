#!/usr/bin/env node
const npmName=require("npm-name"),{promisify}=require("util"),axios=require("axios"),fs=require("fs"),sleep=promisify(setTimeout);function logHelp(){console.log(`
    confusion-test

    OPTIONS
      --token   Github token
      --silent  Do not print to console

    EXAMPLES
      echo 'github_account_name' | confusion-test --token {{GITHUB_TOKEN}}
      cat orgs.txt | confusion-test --token {{GITHUB_TOKEN}}`)}const args=process.argv.slice(2);let silent=0<=args.indexOf("--silent");const tokenIndex=args.indexOf("--token");let token;function getLogStream(){const e=new Date;var t=`./available-packages-${e.getFullYear()}-${e.getMonth()}-${e.getDate()}_${e.getHours()}-${e.getMinutes()}-${e.getSeconds()}.txt`;return fs.createWriteStream(t,{flags:"a"})}function run(){let o="",s=[];process.stdin.on("data",async e=>{const t=o+e,n=t.split("\n");o=n.pop()||"",s=[...s,...n]}),process.stdin.on("close",async()=>{o&&s.push(o),await processOrgs(s),process.exit()}),process.stdin.setEncoding("utf-8"),process.stdin.resume()}function log(e){silent||console.log(e)}0<=tokenIndex?token=args[tokenIndex+1]:(logHelp(),process.exit());async function processOrgs(e){var s,r={Authorization:`Bearer ${token}`,"Content-Type":"application/json"};let a=0;const i=new Set,c=getLogStream();for(s of e){a++,log(`+ Processing org ${s} - ${a}/${e.length}`);let t=!1,n=1,o=0;for(;!t;){let e;try{({data:e}=await axios.request({method:"GET",url:`https://api.github.com/search/code?q=org:${s}+filename:package.json&page=${n}`,headers:r})),n++}catch(e){if(log(e),await sleep(500),o++,3<=o)break;continue}var l=e.items.filter(e=>"package.json"===e.name);if(0!==l.length){for(var g of l)if(!g.repository||!g.repository.archived){await sleep(1e3),log(`++ Processing repo: ${g.repository.full_name}. package.json path: ${g.path}`);let n;try{n=await axios.request({method:"GET",url:g.git_url,headers:r})}catch(e){log(e),await sleep(5e3)}if(n&&n.data){let e=Buffer.from(n.data.content,"base64");var p=e.toString("utf8");let t;try{t=JSON.parse(p)}catch(e){log("Error parsing file contents");continue}if(t){var f,u,d=Object.keys(t.dependencies||{}),p=Object.keys(t.devDependencies||{});for(f of[...d,...p])if(f&&"@"!==f[0]){let e=!1;try{e=!i.has(`${s}/${f}`)&&await npmName(f)}catch(e){log(`Package ${f}: ${e.warnings}`),await sleep(1e4)}i.add(`${s}/${f}`),!e||checkIfVersionIsValid(u=t.dependencies&&t.dependencies[f]||t.devDependencies&&t.devDependencies[f])&&(log(`################\n AVAILABLE!!! Org: ${s} Package: ${f}@${u} Repo: ${g.repository.full_name} Path: ${g.path}\n################`),c.write(`${s};${f};${u};${g.repository.full_name};${g.path}\n`))}}}else log("Something went wrong while fetching the file")}}else t=!0}}}function checkIfVersionIsValid(t){if(void 0===t)return!1;if("*"===t||"x"===t)return!0;if("^"!==t[0]&&"~"!==t[0]&&">"!==t[0]&&(t[0]<"0"||"9"<t[0]))return!1;for(let e=1;e<t.length;e++)if((t[e]<"0"||"9"<t[e])&&"."!==t[e]&&"x"!==t[e])return!1;return!0}run();